#!/usr/bin/env node

'use strict';

var BizServer = require('../src/biz-server'),
    colors = require('colors'),
    os = require('os'),
    opener = require('opener'),
    argv = require('optimist')
    .boolean('cors')
    .argv;

var ifaces = os.networkInterfaces(),
    logger;

function start(argv) {
    var port = argv.p || parseInt(process.env.PORT, 10),
        host = argv.a || '0.0.0.0',
        ssl = !!argv.S || !!argv.ssl,
        proxy = argv.P || argv.proxy,
        utc = argv.U || argv.utc,
        as = argv.as || '.action';

    if (!argv.s && !argv.silent) {
        logger = {
            info: console.log,
            request: function(req, res, error) {
                var date = utc ? new Date().toUTCString() : new Date();
                if (error) {
                    logger.info(
                        '[%s] "%s %s" Error (%s): "%s"',
                        date, req.method.red, req.url.red,
                        error.status.toString().red, error.message.red
                    );
                } else {
                    logger.info(
                        '[%s] "%s %s" "%s"',
                        date, req.method.cyan, req.url.cyan,
                        req.headers['user-agent']
                    );
                }
            }
        };
    } else if (colors) {
        logger = {
            info: function() {},
            request: function() {}
        };
    }
    var options = {
        root: argv._[0] || argv.r || argv.root,
        cache: argv.c,
        showDir: argv.d,
        autoIndex: argv.i,
        robots: argv.r || argv.robots,
        ext: argv.e || argv.ext,
        logFn: logger.request,
        proxy: proxy,
        host: host,
        m: argv.m || argv.mock,
        port: port || 8080
    };
    if (argv.cors) {
        options.cors = true;
        if (typeof argv.cors === 'string') {
            options.corsHeaders = argv.cors;
        }
    }

    if (ssl) {
        options.https = {
            cert: argv.C || argv.cert || 'cert.pem',
            key: argv.K || argv.key || 'key.pem'
        };
    }

    var server = BizServer.startServer(options,
        function() {
            var canonicalHost = host === '0.0.0.0' ? '127.0.0.1' : host,
                protocol = ssl ? 'https:' : 'http:';

            logger.info(['Starting up http-server, serving '.yellow,
                server.root.cyan,
                ssl ? (' through'.yellow + ' https'.cyan) : '',
                '\nAvailable on:'.yellow
            ].join(''));

            Object.keys(ifaces).forEach(function(dev) {
                ifaces[dev].forEach(function(details) {
                    if (details.family === 'IPv4') {
                        logger.info(('  ' + protocol + details.address + ':' + options.port.toString()).green);
                    }
                });
            });

            if (typeof proxy === 'string') {
                logger.info('Unhandled requests will be served from: ' + proxy);
            }

            logger.info('Hit CTRL-C to stop the server');
            if (argv.o) {
                opener(
                    protocol + '//' + canonicalHost + ':' + options.port, {
                        command: argv.o !== true ? argv.o : null
                    }
                );
            }
        });
}

if (argv.init !== void 0) {
    switch (argv.init) {
        //初始化mock
        case 'mock':
            server.initFolder();
            process.exit();
            break;
        default:
            process.exit();
            break;
    }
} else if (argv.v || argv.version) {
    console.log(BizServer.version);
    process.exit();
} else if (argv.h || argv.help) {
    console.log([
        'usage: biz-server [path] [options]',
        '',
        'options:',
        '  -p           Port to use [8080]',
        '  -a           Address to use [0.0.0.0]',
        '  -d           Show directory listings [true]',
        '  -i           Display autoIndex [true]',
        '  --as         filterd ajax request suffix, comma separated  [.action]',
        '  -m --mock    mock config path  [cwd() + /config/mockConfig]',
        '  -e --ext     Default file extension if none supplied [none]',
        '  -s --silent  Suppress log messages from output',
        '  --cors[=headers]   Enable CORS via the "Access-Control-Allow-Origin" header',
        '                     Optionally provide CORS headers list separated by commas',
        '  -o [path]    Open browser window after starting the server',
        '  -c           Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.',
        '               To disable caching, use -c-1.',
        '  -U --utc     Use UTC time format in log messages.',
        '',
        '  -P --proxy   Fallback proxy if the request cannot be resolved. e.g.: http://someurl.com',
        '',
        '  -S --ssl     Enable https.',
        '  -C --cert    Path to ssl cert file (default: cert.pem).',
        '  -K --key     Path to ssl key file (default: key.pem).',
        '',
        '  -r --robots  Respond to /robots.txt [User-agent: *\\nDisallow: /]',
        '  -h --help    Print this list and exit.',
        '  -v --version Print the version.'
    ].join('\n'));
    process.exit();
} else {
    start(argv);
}

if (process.platform === 'win32') {
    require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
    }).on('SIGINT', function() {
        process.emit('SIGINT');
    });
}

process.on('SIGINT', function() {
    logger.info('http-server stopped.'.red);
    process.exit();
});

process.on('SIGTERM', function() {
    logger.info('http-server stopped.'.red);
    process.exit();
});